import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class BOJ_3020 {

    static int N, H;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        H = Integer.parseInt(st.nextToken());
        int size = N/2;

        int[] top = new int[N/2];
        int[] bot = new int[N/2];

        for (int i = 0; i < size; i++) {
            st = new StringTokenizer(br.readLine());
            int parseInt = Integer.parseInt(st.nextToken());
            top[i] = parseInt;

            st = new StringTokenizer(br.readLine());
            int parseInt2 = Integer.parseInt(st.nextToken());
            bot[i] = parseInt2;
        }

        int minHight = Integer.MAX_VALUE;       //최소 높이
        int cnt = 0;            //최소 높이 수
        //여러번 탐색해야 하므로 한 번에 정렬
        Arrays.sort(bot);
        Arrays.sort(top);

        for (int h = 1; h <= H; h++) {
            int b = size - botCnting(bot, h);
            int t = size - botCnting(bot, H - h + 1);

            int thisCount = b + t;
            if (thisCount < minHight) {
                minHight = thisCount;
                cnt = 1;
            } else if (thisCount == minHight) {
                cnt++;
            }
        }

        System.out.printf("%d %d\n", minHight, cnt);
    }

    public static int botCnting(int[] list, int h) {
        int cnt = 0;
        for (int i : list) {
            if (i >= h) {
                cnt++;
            } else {
                return cnt;
            }
        }

        return cnt;
    }
}
