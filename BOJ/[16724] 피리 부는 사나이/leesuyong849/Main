import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class BOJ_16724 {

    static int N, M;
    static char[][] map;
    static int[][] state;
    static int safeZones = 0;

    public static void main(String[] args) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());


        char[][] map = new char[N][M];
        for (int i = 0; i < N; i++) {
            String stt = br.readLine().trim();
            for (int j = 0; j < M; j++) {
                map[i][j] = stt.charAt(j);
            }
        }

        state = new int[N][M];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                if (state[i][j] == 0) {
                    dfs(i, j);
                }
            }
        }

        System.out.println(safeZones);
    }

    static void dfs(int r, int c) {
        state[r][c] = 1;  // 탐색중

        // 다음 좌표 계산
        int curx = r;
        int cury = c;


        if (map[curx][cury] == 'U') {
            curx += 1;
        } else if (map[curx][cury] == 'D') {
            curx -= 1;
        } else if (map[curx][cury] == 'L') {
            cury -= 1;
        } else {
            cury += 1;
        }

        if (state[curx][cury] == 0) {
            dfs(curx, cury);
        } else if (state[curx][cury] == 1) {
            safeZones++;
        }
        state[r][c] = 2;  // 처리 완료
    }
}
