import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {

    static int N, M;
    static int[][] map, group;
    static int[] dx = {0, 0, -1, 1};
    static int[] dy = {1, -1, 0, 0};
    static Map<Integer, Integer> groupSize = new HashMap<>();
    static int groupId = 1; // 그룹 번호는 1부터 시작

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(bf.readLine());

        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        map = new int[N][M];
        group = new int[N][M];

        for (int i = 0; i < N; i++) {
            String line = bf.readLine();
            for (int j = 0; j < M; j++) {
                map[i][j] = line.charAt(j) - '0';
            }
        }

        // 1. 0인 영역을 BFS로 그룹핑
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                if (map[i][j] == 0 && group[i][j] == 0) {
                    bfs(i, j);
                }
            }
        }

        // 2. 벽 위치에 대해 주변 그룹의 합산
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                if (map[i][j] == 1) {
                    Set<Integer> nearGroups = new HashSet<>();
                    int sum = 1; // 자기 자신 포함

                    for (int d = 0; d < 4; d++) {   //각 방향에 대햐여
                        int nx = i + dx[d];         //다음 위치 계산 {0, 0, -1, 1}
                        int ny = j + dy[d];

                        if (nx >= 0 && nx < N && ny >= 0 && ny < M) {       //범위 안에 위치 하는지 확인
                            int g = group[nx][ny];
                            if (g != 0) {
                                nearGroups.add(g);      //위에서 구한 BFS 그룹 사이즈를 더한다.
                            }
                        }
                    }

                    for (int g : nearGroups) {
                        sum += groupSize.get(g);
                    }

                    sb.append(sum % 10);
                } else {
                    sb.append(0);
                }
            }
            sb.append('\n');
        }

        System.out.print(sb);
    }

    // BFS로 0 영역 그룹핑(이때 문제에서 1을 0으로 만들고 계산하는 것은 고려하지 않는다. 순수히 문제에서 제시한 맵 기준으로 계산
    static void bfs(int x, int y) {
        Queue<int[]> q = new ArrayDeque<>();
        q.offer(new int[]{x, y});
        group[x][y] = groupId;
        int count = 1;

        while (!q.isEmpty()) {
            int[] cur = q.poll();
            int cx = cur[0], cy = cur[1];

            for (int d = 0; d < 4; d++) {
                int nx = cx + dx[d];
                int ny = cy + dy[d];

                if (nx >= 0 && nx < N && ny >= 0 && ny < M) {
                    if (map[nx][ny] == 0 && group[nx][ny] == 0) {
                        group[nx][ny] = groupId;
                        q.offer(new int[]{nx, ny});
                        count++;
                    }
                }
            }
        }

        groupSize.put(groupId, count);
        groupId++;
    }
}
